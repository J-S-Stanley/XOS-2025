#################################################################
#
# Discriminative OTUs determined using ALDEx2
#
#################################################################


# packages
library("readr")
library("stringr")
library("dplyr")
library("tidyr")
library("tibble")
library("purrr")
library("ALDEx2")
library("readxl")
library("tibble")
library("xlsx")


# set the minimum prevalence and depth
min.prevalence = 0.1
min.depth = 50


# read in the data files
data <- read_tsv('final.opti_mcc.shared')
metadata_file <- read_xlsx('metadata.xlsx')


# get the list of samples that remain following subsampling
# use this list to select samples from final.opti_mcc_shared later
subsampled_names_upper <- read_tsv('final.opti_mcc_upper.0.03.subsample.shared') %>%
  dplyr::select(Group)

subsampled_names_lower <- read_tsv('final.opti_mcc_lower.0.03.subsample.shared') %>%
  dplyr::select(Group)

subsampled_names_list_upper <- subsampled_names_upper$Group
subsampled_names_list_lower <- subsampled_names_lower$Group
subsampled_names_list <- c(subsampled_names_list_upper, subsampled_names_list_lower)


# select samples that remain following subsampling
# edit dataframe for downstream processing
select_data <- data %>% 
  filter(Group %in% subsampled_names_list) %>%
  dplyr::select(-label, -numOtus) %>%
  dplyr::select(which(colSums(. != 0)>=nrow(.)*min.prevalence)) %>%
  dplyr::select(where(~ any(.x >= min.depth)))


# clean the metadata file
# change metadata column name to 'group'
colnames(metadata_file)[2] = 'group'


# remove standards, mocks, controls etc from metadata 
metadata_removed <- metadata_file %>%
  filter(treatment != 'NA')


# use subsampled names list generated earlier to obtain subsampled ID list
subsampled_id_list <- (metadata_removed %>% filter(sample_id %in% subsampled_names_list))$group


# use subsampled id list to select only samples remaining following subsampling from metadata file
metadata <- metadata_removed %>%
  dplyr::select(group, treatment, sample_date, Location, disease_stat) %>%
  rename(date = sample_date) %>%
  rename(site = Location) %>%
  filter(group %in% c(subsampled_id_list)) %>%
  rename(sample_id = group)

metadata_summary <- metadata %>%
  group_by(date, site, treatment) %>%
  summarise(n = n(), .groups = "drop")


# create blank data frame to bind non-significant and significant results for each iteration of the forloops
all_results <- data.frame()
sig_results <- data.frame()


# loop through each iteration of timepoint and GIT site, and perform ALDEx2 analysis
for (i in unique(metadata$date)) {
  for (j in unique(metadata$site)) {
    
    # subset the data
    subset_metadata <- metadata[metadata$date == i & metadata$site == j, ]
    
    # remove OTUs with minimum prevalence below the set threshold
    min_prev_data <- select_data %>%
      separate(col = Group, sep = "_", remove = FALSE,
               into = c("pigid", "date", "pen", "pigno", "diet1", "diet2")) %>%
      dplyr::select(-c(Group, date, pen, pigno, diet1, diet2)) %>%
      rename(sample_id = 'pigid') %>%
      inner_join(subset_metadata) %>%
      dplyr::select(-c(treatment, date, site, disease_stat))
    
    # transpose the data for analysis
    transpose_data  <- min_prev_data %>% 
      pivot_longer(cols = -sample_id, names_to = "OTU") %>% 
      pivot_wider(names_from = sample_id, values_from = value)
    
    # organise subset_metadata
    design <- subset_metadata %>%
      dplyr::select(sample_id, date, site, treatment) %>%
      mutate(date = as.factor(date),
             site = as.factor(site),
             treatment = as.factor(treatment)) %>% 
      column_to_rownames(var = "sample_id")

    # get matrix
    matrix <- transpose_data %>%
      column_to_rownames(var = "OTU") %>%
      as.matrix()
    
    # perform the aldex2 analysis
    mm <- model.matrix(~ treatment, design)
    
    x <- aldex.clr(matrix,
                   mm,
                   mc.samples = 128, denom = 'all', verbose = T)
    
    glm_test <- aldex.glm(x, mm)
    
    glm_effect <- aldex.glm.effect(x)

    # clean aldex2 primary analysis to output results
    # glm_test
    glm_test_withrows <- glm_test %>% rownames_to_column(var = "otu")
    # glm_effect
    glm_effect_xoshi_withrows <- glm_effect[["treatmentXOS_Hi"]] %>% rownames_to_column(var = "otu")
    glm_effect_xoslo_withrows <- glm_effect[["treatmentXOS_Lo"]] %>% rownames_to_column(var = "otu")
    
    # aldex2 primary analysis
    # XOS_Hi
    xos_hi_results <- glm_test_withrows %>% inner_join(glm_effect_xoshi_withrows) %>%
      rename(pval_holm = `treatmentXOS_Hi:pval.holm`) %>%
      rename(pval = `treatmentXOS_Hi:pval`) %>%
      dplyr::select(otu, pval, pval_holm, effect) %>%
      mutate(diet = 'xos_hi')
    # XOS_Lo
    xos_lo_results <- glm_test_withrows %>% inner_join(glm_effect_xoslo_withrows) %>%
      rename(pval_holm = `treatmentXOS_Lo:pval.holm`) %>%
      rename(pval = `treatmentXOS_Lo:pval`) %>%
      dplyr::select(otu, pval, pval_holm, effect) %>%
      mutate(diet = 'xos_lo')
    # combine
    combined_results <- bind_rows(xos_hi_results, xos_lo_results) %>%
      mutate(subset = paste0(i, '_', j)) %>%
      mutate(analysis = 'aldex2')
    
    assign(paste0('non_sig_LFC_', i, '_', j), combined_results, envir = .GlobalEnv)
    
    # aldex2 significant features
    significant_features <- combined_results %>%
      filter(pval < 0.05)
    
    assign(paste0('sig_LFC_', i, '_', j), significant_features, envir = .GlobalEnv)

    # bind non-significant results for each iteration to a single dataframe that can be exported
    all_results <- rbind(all_results, combined_results)
    
    # bind significant results for each iteration to a single dataframe that can be exported
    sig_results <- rbind(sig_results, significant_features)
    
  }
}